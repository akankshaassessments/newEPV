# Production Docker Compose Configuration
# Use this for production deployments with optimized settings

version: '3.8'

services:
  # Flask Application - Production Configuration
  web:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: epv-app-prod
    ports:
      - "5000:5000"
    environment:
      # Database Configuration
      - DB_HOST=db
      - DB_USER=epv_user
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=epv_database
      - DB_PORT=3306
      
      # SMTP Configuration
      - SMTP_SERVER=smtp.gmail.com
      - SMTP_PORT=587
      - SMTP_USERNAME=${SMTP_USERNAME}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      
      # Google OAuth Configuration
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      
      # Google Drive Configuration
      - GOOGLE_DRIVE_FOLDER_ID=${GOOGLE_DRIVE_FOLDER_ID}
      - GOOGLE_SERVICE_ACCOUNT_FILE=/app/service-account.json
      
      # Production Application Configuration
      - SECRET_KEY=${SECRET_KEY}
      - FLASK_ENV=production
      - FLASK_DEBUG=False
      - PYTHONPATH=/app
      
      # Security Settings
      - SESSION_COOKIE_SECURE=True
      - SESSION_COOKIE_HTTPONLY=True
      - SESSION_COOKIE_SAMESITE=Lax
      
      # Logging Configuration
      - LOG_LEVEL=INFO
      - LOG_TO_FILE=True
      - LOG_MAX_BYTES=10485760
      - LOG_BACKUP_COUNT=10
      
    volumes:
      # Persistent storage
      - ./uploads:/app/uploads
      - ./logs:/app/logs
      - ./temp:/app/temp
      # Mount Google service account file
      - ./service-account.json:/app/service-account.json:ro
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - epv-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # MySQL Database - Production Configuration
  db:
    image: mysql:8.0
    container_name: epv-mysql-prod
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=epv_database
      - MYSQL_USER=epv_user
      - MYSQL_PASSWORD=${DB_PASSWORD}
      - MYSQL_CHARACTER_SET_SERVER=utf8mb4
      - MYSQL_COLLATION_SERVER=utf8mb4_unicode_ci
    ports:
      - "3306:3306"
    volumes:
      # Persistent database storage
      - mysql_data:/var/lib/mysql
      # Custom MySQL configuration
      - ./mysql.cnf:/etc/mysql/conf.d/custom.cnf:ro
      # Database initialization scripts
      - ./init-db:/docker-entrypoint-initdb.d:ro
      # Database backups
      - ./backups:/backups
    restart: unless-stopped
    networks:
      - epv-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "epv_user", "-p${DB_PASSWORD}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Redis for session storage - Production Configuration
  redis:
    image: redis:7-alpine
    container_name: epv-redis-prod
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - epv-network
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'

  # Nginx reverse proxy - Production Configuration
  nginx:
    image: nginx:alpine
    container_name: epv-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
      - ./static:/var/www/static:ro
    depends_on:
      web:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - epv-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.25'
        reservations:
          memory: 64M
          cpus: '0.1'

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local

networks:
  epv-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
